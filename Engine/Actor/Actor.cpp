#include "Actor.h"
#include <Windows.h>
#include <iostream>
#include "Engine.h"
#include "Level/Level.h"
#include "Utils/Utils.h"

Actor::Actor(const char* image,Color color, const Vector2& position) :color(color) , position(position)
{
	//문자열 길이
	width = (int)strlen(image);

	//메모리 할당
	this->image = new char[width + 1];

	//문자열 복사
	strcpy_s(this->image, width + 1,image);
}
Actor::~Actor()
{
	//메모리해제
	SafeDeleteArray(image);
}
//이벤트 함수

//객체 생애주기(LifeTime)에 1번만 호출됨 (초기화가 목적임)
void Actor::BeginPlay()
{
	hasBeganPlay = true;
}

//프레임 마다 호출 (반복성 작업/지속성이 필요한 작업)
void Actor::Tick(float deltaTime)
{

}

//그리기 함수
void Actor::Render()
{
	//커서 위치 값 생성
	//COORD coord; 
	//coord.X = (short)position.x;
	//coord.Y = (short)position.y;

	//커서이동
	Utils::SetConsolePosition(position);

	//색상 설정
	Utils::SetConsoleTextColor(color);

	//그리기
	std::cout << image;
}

void Actor::SetPosition(const Vector2& newPosition)
{
	//예외처리 (화면 벗어났는지 확인).

	//왼쪽 가장 자리가 화면 왼쪽을 벗어났는지.
	if (newPosition.x < 0)
	{
		return;
	}

	// 오른쪽 가장자리가 화면 오른쪽을 벗어났는지.
	if (newPosition.x + width - 1 > Engine::Get().Width())
	{
		return;
	}

	//위쪽 가장자리가 화면의 위를 벗어났는지
	if (newPosition.y < 0)
	{
		return;
	}

	//화면 아래를 벗어났는지
	if (newPosition.y - 1 > Engine::Get().Height())
	{
		return;
	}

	if (position == newPosition)
	{
		return;
	}

	//static HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);

	////커서 위치 값 생성
	//COORD coord;
	//coord.X = (short)position.x;
	//coord.Y = (short)position.y;

	//지울 위치 확인
	Vector2 direction = newPosition - position; //갈 위치 - 현재위치 = 방향벡터

	position.x = (direction.x >= 0) ? position.x : position.x + width - 1;

	//커서이동
	Utils::SetConsolePosition(position);

	//문자열 길이 고려해서 지울 위치 확인해야함.
	std::cout << ' ';

	position = newPosition;
}

Vector2 Actor::Position() const
{
	return position;
}

int Actor::Width() const
{
	return width;
}

void Actor::SetSortingOrder(unsigned int sortingOrder)
{
	this->sortingOrder = sortingOrder;
}

void Actor::SetOwner(Level* newOwner)
{
	owner = newOwner;
}

Level* Actor::GetOwner()
{
	return owner;
}

bool Actor::TestIntersect(const Actor* const other)
{
	// AABB(Axis Aligned Bounding Box).
	// Note: 현재 액터 구조 상 세로는 크기가 없음(크기가 1)
	//		따라서 가로의 최소/최대 위치만 더 고려하면 됨.

	//이 액터의 x 좌표 정보
	int xMin = position.x;
	int xMax = position.x + width - 1;

	//충돌 비교할 다른 액터의 x좌표 정보
	int otherXMin = other->position.x;
	int otherXMax = other->position.x + other->width - 1;
	
	//안겹치는 조건 확인
	if (otherXMin > xMax)
	{
		return false;
	}

	if (otherXMax < xMin)
	{
		return false;
	}

	//y 좌표가 같은지 최종 확인.

	return position.y == other->position.y;
}

void Actor::Destroy()
{
	//삭제 요청 되었다고 체크
	isExpired = true;

	//레벨에 삭제 요청을 해야함.
	owner->DestroyActor(this);
}

void Actor::QuitGame()
{
	Engine::Get().Quit();
}
